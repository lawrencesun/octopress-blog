<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2014-11-02T21:16:02+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Notes: 利用七牛云储存Paperclip图片]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/02/railsnotes-storage-paperclip-images/"/>
    <updated>2014-11-02T20:37:35+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/02/railsnotes-storage-paperclip-images</id>
    <content type="html"><![CDATA[<p>之前使用<a href="http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip/">Paperclip来实现Rails应用上传图片的功能</a>, 但是在部署到Heroku时会有无法储存的问题, 每次push都会删除之前上传的图片。</p>

<p>这是因为Heroku不支持动态上传文件, 很多人碰到这种情况, Stackoverflow上推荐的解决方案是使用Amazon S3, 但是这个服务需要信用卡注册, 另外只能免费使用一年。</p>

<p>这无疑会提高试错和测试阶段的成本。经过另一番搜索, 发现<a href="https://portal.qiniu.com/signup?code=3lnzd178edmqa">七牛云</a>储存可以用来实现图片的储存和调用。</p>

<p>首先需要调用<a href="https://github.com/lidaobing/paperclip-qiniu">paperclip-qiniu</a>的gem, 并对之前使用paperclip的相关文件进行修改。</p>

<p>修改paperclip的初始化内容, <code>config/initializers/paperclip.rb</code>:</p>

<p><code>ruby
Paperclip::Attachment.default_options[:storage] = :qiniu
Paperclip::Attachment.default_options[:qiniu_credentials] = {
  :access_key =&gt; 'youraccesskey',
  :secret_key =&gt; 'yoursecretkey'
}
Paperclip::Attachment.default_options[:bucket] = 'topics-1024'
Paperclip::Attachment.default_options[:use_timestamp] = false
Paperclip::Attachment.default_options[:qiniu_host] =
  'http://yourhostname.qiniudn.com'
</code>
这里access_key, secret_key, qiniu_host分别是七牛云储存的相关信息。</p>

<p>```ruby
has_attached_file :photo,</p>

<pre><code>    :default_url =&gt; 'http://xxx.com/bookmissing.jpg',
:path =&gt; ":class/:attachment/:id/:basename.:extension"
</code></pre>

<p>validates_attachment_content_type :photo, :content_type => /\Aimage\/.*\Z/
```
其中default_url是默认图片, 可以事先上传至七牛。</p>

<p>path是图片储存和调用的地址, 可以根据需要来更改。例如:</p>

<p><code>http://yourhost-qiniudn.com/books/photos/1/name.jpg</code></p>

<p>接下来需要在view中调用:</p>

<p><code>ruby
&lt;%= qiniu_image_tag @movie.photo.url, :thumbnail =&gt; '212x316!', :quality =&gt; 80 %&gt;
</code>
这里可以自定义一些选项, 比如thumbnail, gravity, crop, quality等, 具体可以参考七牛云的<a href="http://docs.qiniutek.com/v3/api/foimg/#imageView">高级图像处理接口</a>文档。</p>

<p>至此，实现了paperclip上传图片的存储和调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Make Dropdown Work on Heroku]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-make-dropdown-work-on-heroku/"/>
    <updated>2014-10-26T12:07:57+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-make-dropdown-work-on-heroku</id>
    <content type="html"><![CDATA[<p>After I deployed a app on Heroku, I found that the Bootstap dropdown menu didn&rsquo;t work on Heroku. It was working in my local development environment.</p>

<p>So I searched the answers from stackoverflow. It seemed that it was a common problem.</p>

<p>I had tried to reorder the //=jquery and //=bootstrap and reorder back again and again. I also ran asset precompile method. However, it still didn&rsquo;t work in my situation.</p>

<p>Then I compared an app I wrote before, and I found that there might be the conflict between &lsquo;bootstrap&rsquo; and &lsquo;bootstrap-spockets&rsquo;. The dropdown menu worked if either of them were removed. So I removed &lsquo;bootstrap&rsquo; finally. I am not sure if it will cause any further problems but so far it&rsquo;s fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Heroku Environment Configuration Problem]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-heroku-environment-configuration-problem/"/>
    <updated>2014-10-26T12:06:49+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-heroku-environment-configuration-problem</id>
    <content type="html"><![CDATA[<p>When I tried to deploy one of my rails app on Heroku, the following problem occured.</p>

<p><code>
can't convert nil into String
/app/config/initializers/devise.rb:13:in `+'
</code>
The reason was that I set DOMAIN_NAME etc. inside secret.yml and this file was git ignored since I wanted to keep credentials private. So Heroku couldn&rsquo;t find these configuration values.</p>

<p>Using figaro gem seems a good way to fix this. But I didn&rsquo;t want to add another gem and create a new yml file.</p>

<p>What I did was set Heroku environment variables directly and it worked:</p>

<p><code>
$ heroku config:add GMAIL_USERNAME='myname@gmail.com' GMAIL_PASSWORD='mypassword'
$ heroku config:add DOMAIN_NAME='example.com'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Upload Avatar Using Paperclip]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip/"/>
    <updated>2014-09-21T17:28:49+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip</id>
    <content type="html"><![CDATA[<p>In my previous rails apps, I used gravatar_for method to link the gravatar to users. In a recent app, I wanted to add cover photos to the books and allow users to upload the images.</p>

<p>So I decided to use paperclip after seeing one of the <a href="http://railscasts.com/episodes/134-paperclip">episode</a> of railscast. Instead of applying the plugin, I installed paperclip gem.</p>

<p>Add <code>gem "paperclip", "~&gt; 4.2"</code> to Gemfile and run <code>bundle install</code>.</p>

<p>Then add photo columns to the existing books table.</p>

<!-- more -->


<p><code>rails g migration AddPhotosToBooks</code></p>

<p>Migration:</p>

<p>```ruby
class AddAvatarColumnsToUsers &lt; ActiveRecord::Migration
  def up</p>

<pre><code>add_attachment :books, :photo
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>remove_attachment :books, :photo
</code></pre>

<p>  end
end
```</p>

<p>This will insert four columns into books table: photo_file_name, photo_file_size, photo_content_type, photo_updated_at.</p>

<p>Add the following lines to Book Model:</p>

<p>```ruby
has_attached_file :photo, :styles => { :medium => &ldquo;300x300>&rdquo;, :thumb => &ldquo;100x100>&rdquo; }, :default_url => &ldquo;missing.png&rdquo;,</p>

<pre><code>    :url =&gt; "/assets/books/:id/:style/:basename.:extension",
:path =&gt; ":rails_root/public/assets/books/:id/:style/:basename.:extension"
validates_attachment :photo, 
</code></pre>

<p>  :content_type => { :content_type => [&ldquo;image/jpeg&rdquo;, &ldquo;image/jpg&rdquo;, &ldquo;image/gif&rdquo;, &ldquo;image/png&rdquo;] },
  :size => { :less_than => 5.megabytes }
```</p>

<p>Forms to be updated:</p>

<p>```ruby</p>

<div class="form-group">
    <%= f.label "cover" %>
    <%= f.file_field :photo %>
</div>


<p>```</p>

<p>And the updated book&rsquo;s show view with the uploaded photo.</p>

<p><code>ruby
&lt;%= image_tag @book.photo.url(:medium) %&gt;
</code></p>

<p>Besides, in order to run paperclip, ImageMagick is required. We can simply install it by homebrew.</p>

<p><code>brew install imagemagick</code></p>

<p>However, when I installed homebrew, several issues came out.</p>

<p>It was a long story, briefly speeking, I ran <code>brew doctor</code> and tried to solve the warning issues by searching the net. Basiclly, I updated Git and Command Line Tool and reinstall the homebrew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Remember Me and Reset Password]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/08/12/rails-notes-remember-me-and-reset-password/"/>
    <updated>2014-08-12T16:14:58+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/08/12/rails-notes-remember-me-and-reset-password</id>
    <content type="html"><![CDATA[<p><strong>1. Remember Me</strong></p>

<p>We used sessions to store user&rsquo;s id in order to let them sign in just once. However, when users close browser, the session cookie is deleted. So we would like to replace it with a permanent one. Besides, if we store and expose user&rsquo;s id, it could be dangerous.</p>

<p>Therefore, we will generate and store a unique token for each user. First, create a new column to store the token.</p>

<!-- more -->


<p><code>
$ rails g migration add_remember_token_to_users remember_token:string
$ rake db:migrate
</code></p>

<p>Then write a method to generate remember_token before creating a new user in models/user.rb</p>

<p>```ruby
class User &lt; ActiveRecord::Base
&hellip;
before_create { generate_token(:remember_token)}
&hellip;
def generate_token(column)</p>

<pre><code>begin 
    self[column] = SecureRandom.urlsafe_base64
end while User.exists?(column =&gt; self[column])
</code></pre>

<p>end
```</p>

<p>Add a checkbox in views/sessions/new.html.erb for user to let them choose if they want us to remember.</p>

<p>```html</p>

<div class="checkbox">
    <label>
        <%= check_box_tag :remember_me, 1, params[:remember_me] %>
        <%= t('remember me') %>
    </label><br>
</div>


<p>```</p>

<p>Modify the SessionsController so that we store remember_token in cookies when user signed in.</p>

<p>```ruby
def create</p>

<pre><code>user = User.find_by_username(params[:username])
if user &amp;&amp; user.authenticate(params[:password])
    if params[:remember_me]
        cookies.permanent[:remember_token] = user.remember_token
    else
        cookies[:remember_token] = user.remember_token
    end
    flash[:success] = t('flash.session.create.success') + ", #{params[:username]}."
    redirect_to root_path
else
    flash.now[:error] = t('flash.session.create.error')
    render 'new'
end
</code></pre>

<p>end
```</p>

<p>Modify the current_user method in application.rb so it reads the remember_token from cookies rather than the user.id from the session.</p>

<p><code>ruby
def current_user
  @current_user ||= User.find_by_remember_token(cookies[:remember_token]) if cookies[:remember_token]
end
</code></p>

<p>Finally, we want to fill the remember_token column for existing users. Write a file called rebuild_remember_token.rake in lib/tasks and run <code>rake user:rebuild_remember_token</code>.</p>

<p>```ruby
namespace :user do
  desc &ldquo;Rebuild Remember-Tokens&rdquo;
  task :rebuild_remember_token => :environment do</p>

<pre><code>User.transaction do
  User.all.each { |u|
    u.update_attribute :remember_token, SecureRandom.urlsafe_base64
  }
end
</code></pre>

<p>  end
end
```</p>

<p><strong>2. Password Reset</strong></p>

<p>We would like to allow users to reset their password when they forget. First, we will generate the route: <code>resources :password_resets</code>.</p>

<p>Then add a link in the signin page(views/sessions/new.html.erb).</p>

<p>```ruby</p>

<div class="checkbox">
    <label>
        <%= check_box_tag :remember_me, 1, params[:remember_me] %>
        <%= t('.remember_me') %> | <%= link_to t('.forgotten_password'), new_password_reset_path %>
    </label><br/>
</div>


<p>```</p>

<p>Create a password_resets_controller.rb file and a new.html.erb file in views/password_resets.</p>

<p>```ruby
class PasswordResetsController &lt; ApplicationController</p>

<pre><code>def new
end

def create
    @user = User.find_by_email(params[:email])
    if @user
        @user.send_password_reset
        flash[:success] = t('flash.reset.email.success')
        redirect_to root_path
    else 
        flash.now[:error] =  t('flash.reset.email.error')
        render 'new'
    end
end
</code></pre>

<p>```</p>

<p>```ruby</p>

<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="well">
            <h4><%= t('.password_reset') %></h4>
            <hr/>
            <%= form_tag password_resets_path, method: 'post' do %>
        <div class="form-group">
            <%= label_tag :email %><br/>
            <%= text_field_tag :email, params[:email], class: "form-control" %>
        </div>
        <%= submit_tag t('.password_reset'), class: "btn btn-primary" %>
            <% end %>
        </div>
    </div>
</div>


<p>```</p>

<p>Then we will add columns to store the a token for the reset request and the expire time of it.</p>

<p><code>ruby
$ rails g migration add_password_reset_to_users password_reset_token:string password_reset_sent_at:datetime
</code></p>

<p>When the user is found by the email, we will generate a token and send a reset email using send_password_reset method in /models/user.rb</p>

<p>```ruby
def send_password_reset</p>

<pre><code>self.update_column(:password_reset_token, SecureRandom.urlsafe_base64)
</code></pre>

<p>  self.update_column(:password_reset_sent_at, Time.zone.now)
  UserMailer.password_reset(self).deliver
end
```</p>

<p>Create the UserMailer and email template in /views/user_mailer/password_reset_text.erb</p>

<p><code>ruby
$ rails g mailer user_mailer password_reset
</code></p>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  default from: &ldquo;<a href="&#109;&#97;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#102;&#x72;&#111;&#109;&#64;&#101;&#120;&#x61;&#109;&#112;&#x6c;&#x65;&#x2e;&#x63;&#111;&#109;">&#x66;&#114;&#111;&#x6d;&#64;&#x65;&#120;&#97;&#x6d;&#112;&#108;&#101;&#x2e;&#x63;&#111;&#x6d;</a>&rdquo;</p>

<p>  def password_reset(user)</p>

<pre><code>@user = user 
mail to: user.email, subject: "Password Reset"
</code></pre>

<p>  end
end
```</p>

<p>```ruby
To reset your password click the URL below.</p>

<p>&lt;%= edit_password_reset_url(@user.password_reset_token) %></p>

<p>If you did not request your password to be reset please ignore this email and your password will stay as it is.
```</p>

<p>We will need to alter enviroment configuration in /config/environment/development.rb to get URLs working. Similar line in production.rb with the live domain name.</p>

<p><code>ruby
Auth::Application.configure do
  config.action_mailer.default_url_options = { :host =&gt; "localhost:3000" }
end
</code></p>

<p>The URL includes the token as the id parameter, which we will use it in edit action. Create a form for users to reset password in edit.html.erb</p>

<p>```ruby
def edit</p>

<pre><code>@user = User.find_by_password_reset_token!(params[:id])
</code></pre>

<p>end
```</p>

<p>```ruby</p>

<h4><%= t('.password_reset') %></h4>


<hr/>


<p>&lt;%= render &lsquo;shared/error&rsquo;, object: @user %>
&lt;%= form_for @user, url: password_reset_path(params[:id]) do |f| %>
  <div class="form-group"></p>

<pre><code>    &lt;%= f.label :password, t('password') %&gt;
    &lt;%= f.password_field :password, class:"form-control", placeholder: "At least 6 digits"%&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;%= f.label :password_confirmation, t('password_confirmation') %&gt;
    &lt;%= f.password_field :password_confirmation, class:"form-control" %&gt;
&lt;/div&gt;
&lt;%= submit_tag t('update'), class: "btn btn-primary" %&gt;
</code></pre>

<p>&lt;% end %> <br/>
```</p>

<p>Here we use form_for in this form as we’re modifying a resource. Because of this we have to explicitly set the :url parameter so that the form isn’t POSTed to the UsersController. Instead it is sent to the PasswordResetsController’s update action, passing in the reset token as the id.</p>

<p>Finally, we will write the update action.</p>

<p>```ruby
def update
  @user = User.find_by_password_reset_token!(params[:id])
  if @user.password_reset_sent_at &lt; 2.hours.ago</p>

<pre><code>flash[:error] = t('flash.reset.error')
redirect_to new_password_reset_path
</code></pre>

<p>  elsif @user.update_attributes(params.permit![:user])</p>

<pre><code>@user.update_attribute(:password_reset_token, nil)
flash[:success] = t('flash.reset.success')
redirect_to signin_path
</code></pre>

<p>  else</p>

<pre><code>render 'edit'
</code></pre>

<p>  end
end
```</p>

<p><sub>Reference: <a href="http://railscasts.com/episodes/274-remember-me-reset-password?view=asciicast">Railscasts</a></sub></p>
]]></content>
  </entry>
  
</feed>
