<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2014-11-08T17:34:22+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Link to Commentable]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/08/rails-notes-link-to-commentable/"/>
    <updated>2014-11-08T17:19:09+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/08/rails-notes-link-to-commentable</id>
    <content type="html"><![CDATA[<p>Few days ago I created a polymorphic comment model based on <a href="http://railscasts.com/episodes/154-polymorphic-association">Railscasts</a>.</p>

<p>Today I wanted to show the lastest comments on homepage and link each comment body to their &lsquo;parents&rsquo; like a book or a movie.</p>

<p>The link path was a bit tricky and finally I figured it out.</p>

<p>What you need here is this particular comment&rsquo;s commentable type like &lsquo;book&rsquo; or &lsquo;movie&rsquo;, as well as the commentable id, so it will leads you to the show page and the url should like &lsquo;book/id&rsquo;.</p>

<!-- more -->


<p>The view page could look like this.</p>

<p><code>ruby
&lt;%= link_to markdown(@comment.body), [@comment.commentable, @comment] %&gt;
</code></p>

<p>Then it will pass commentable type and id, looking for comment/show action.</p>

<p>So add show action in comments_controller like this</p>

<p>```ruby
def show</p>

<pre><code>redirect_to @commentable
</code></pre>

<p>end
```
This will direct to the page that I want.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: 利用七牛云储存Paperclip图片]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/02/railsnotes-storage-paperclip-images/"/>
    <updated>2014-11-02T20:37:35+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/02/railsnotes-storage-paperclip-images</id>
    <content type="html"><![CDATA[<p>之前使用<a href="http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip/">Paperclip来实现Rails应用上传图片的功能</a>, 但是在部署到Heroku时会有无法储存的问题, 每次push都会删除之前上传的图片。</p>

<p>这是因为Heroku不支持动态上传文件, 很多人碰到这种情况, Stackoverflow上推荐的解决方案是使用Amazon S3, 但是这个服务需要信用卡注册, 另外只能免费使用一年。</p>

<p>这无疑会提高试错和测试阶段的成本。经过另一番搜索, 发现<a href="https://portal.qiniu.com/signup?code=3lnzd178edmqa">七牛云</a>储存可以用来实现图片的储存和调用。</p>

<!-- more -->


<p>首先需要调用<a href="https://github.com/lidaobing/paperclip-qiniu">paperclip-qiniu</a>的gem, 并对之前使用paperclip的相关文件进行修改。</p>

<p>修改paperclip的初始化内容, <code>config/initializers/paperclip.rb</code>:</p>

<p><code>ruby
Paperclip::Attachment.default_options[:storage] = :qiniu
Paperclip::Attachment.default_options[:qiniu_credentials] = {
  :access_key =&gt; 'youraccesskey',
  :secret_key =&gt; 'yoursecretkey'
}
Paperclip::Attachment.default_options[:bucket] = 'topics-1024'
Paperclip::Attachment.default_options[:use_timestamp] = false
Paperclip::Attachment.default_options[:qiniu_host] =
  'http://yourhostname.qiniudn.com'
</code>
这里access_key, secret_key, qiniu_host分别是七牛云储存的相关信息。</p>

<p>```ruby
has_attached_file :photo,</p>

<pre><code>    :default_url =&gt; 'http://xxx.com/bookmissing.jpg',
:path =&gt; ":class/:attachment/:id/:basename.:extension"
</code></pre>

<p>validates_attachment_content_type :photo, :content_type => /\Aimage\/.*\Z/
```
其中default_url是默认图片, 可以事先上传至七牛。</p>

<p>path是图片储存和调用的地址, 可以根据需要来更改。例如:</p>

<p><code>http://yourhost-qiniudn.com/books/photos/1/name.jpg</code></p>

<p>接下来需要在view中调用:</p>

<p><code>ruby
&lt;%= qiniu_image_tag @movie.photo.url, :thumbnail =&gt; '212x316!', :quality =&gt; 80 %&gt;
</code>
这里可以自定义一些选项, 比如thumbnail, gravity, crop, quality等, 具体可以参考七牛云的<a href="http://docs.qiniutek.com/v3/api/foimg/#imageView">高级图像处理接口</a>文档。</p>

<p>至此，实现了paperclip上传图片的存储和调用。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Make Dropdown Work on Heroku]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-make-dropdown-work-on-heroku/"/>
    <updated>2014-10-26T12:07:57+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-make-dropdown-work-on-heroku</id>
    <content type="html"><![CDATA[<p>After I deployed a app on Heroku, I found that the Bootstap dropdown menu didn&rsquo;t work on Heroku. It was working in my local development environment.</p>

<p>So I searched the answers from stackoverflow. It seemed that it was a common problem.</p>

<p>I had tried to reorder the //=jquery and //=bootstrap and reorder back again and again. I also ran asset precompile method. However, it still didn&rsquo;t work in my situation.</p>

<p>Then I compared an app I wrote before, and I found that there might be the conflict between &lsquo;bootstrap&rsquo; and &lsquo;bootstrap-spockets&rsquo;. The dropdown menu worked if either of them were removed. So I removed &lsquo;bootstrap&rsquo; finally. I am not sure if it will cause any further problems but so far it&rsquo;s fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Heroku Environment Configuration Problem]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-heroku-environment-configuration-problem/"/>
    <updated>2014-10-26T12:06:49+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/10/26/rails-notes-heroku-environment-configuration-problem</id>
    <content type="html"><![CDATA[<p>When I tried to deploy one of my rails app on Heroku, the following problem occured.</p>

<p><code>
can't convert nil into String
/app/config/initializers/devise.rb:13:in `+'
</code>
The reason was that I set DOMAIN_NAME etc. inside secret.yml and this file was git ignored since I wanted to keep credentials private. So Heroku couldn&rsquo;t find these configuration values.</p>

<!-- more -->


<p>Using figaro gem seems a good way to fix this. But I didn&rsquo;t want to add another gem and create a new yml file.</p>

<p>What I did was set Heroku environment variables directly and it worked:</p>

<p><code>
$ heroku config:add GMAIL_USERNAME='myname@gmail.com' GMAIL_PASSWORD='mypassword'
$ heroku config:add DOMAIN_NAME='example.com'
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Upload Avatar Using Paperclip]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip/"/>
    <updated>2014-09-21T17:28:49+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/09/21/rails-notes-upload-avatar-using-paperclip</id>
    <content type="html"><![CDATA[<p>In my previous rails apps, I used gravatar_for method to link the gravatar to users. In a recent app, I wanted to add cover photos to the books and allow users to upload the images.</p>

<p>So I decided to use paperclip after seeing one of the <a href="http://railscasts.com/episodes/134-paperclip">episode</a> of railscast. Instead of applying the plugin, I installed paperclip gem.</p>

<p>Add <code>gem "paperclip", "~&gt; 4.2"</code> to Gemfile and run <code>bundle install</code>.</p>

<p>Then add photo columns to the existing books table.</p>

<!-- more -->


<p><code>rails g migration AddPhotosToBooks</code></p>

<p>Migration:</p>

<p>```ruby
class AddAvatarColumnsToUsers &lt; ActiveRecord::Migration
  def up</p>

<pre><code>add_attachment :books, :photo
</code></pre>

<p>  end</p>

<p>  def down</p>

<pre><code>remove_attachment :books, :photo
</code></pre>

<p>  end
end
```</p>

<p>This will insert four columns into books table: photo_file_name, photo_file_size, photo_content_type, photo_updated_at.</p>

<p>Add the following lines to Book Model:</p>

<p>```ruby
has_attached_file :photo, :styles => { :medium => &ldquo;300x300>&rdquo;, :thumb => &ldquo;100x100>&rdquo; }, :default_url => &ldquo;missing.png&rdquo;,</p>

<pre><code>    :url =&gt; "/assets/books/:id/:style/:basename.:extension",
:path =&gt; ":rails_root/public/assets/books/:id/:style/:basename.:extension"
validates_attachment :photo, 
</code></pre>

<p>  :content_type => { :content_type => [&ldquo;image/jpeg&rdquo;, &ldquo;image/jpg&rdquo;, &ldquo;image/gif&rdquo;, &ldquo;image/png&rdquo;] },
  :size => { :less_than => 5.megabytes }
```</p>

<p>Forms to be updated:</p>

<p>```ruby</p>

<div class="form-group">
    <%= f.label "cover" %>
    <%= f.file_field :photo %>
</div>


<p>```</p>

<p>And the updated book&rsquo;s show view with the uploaded photo.</p>

<p><code>ruby
&lt;%= image_tag @book.photo.url(:medium) %&gt;
</code></p>

<p>Besides, in order to run paperclip, ImageMagick is required. We can simply install it by homebrew.</p>

<p><code>brew install imagemagick</code></p>

<p>However, when I installed homebrew, several issues came out.</p>

<p>It was a long story, briefly speeking, I ran <code>brew doctor</code> and tried to solve the warning issues by searching the net. Basiclly, I updated Git and Command Line Tool and reinstall the homebrew.</p>
]]></content>
  </entry>
  
</feed>
