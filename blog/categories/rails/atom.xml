<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2014-08-13T22:52:37+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Remember Me and Reset Password]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/08/12/rails-notes-remember-me-and-reset-password/"/>
    <updated>2014-08-12T16:14:58+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/08/12/rails-notes-remember-me-and-reset-password</id>
    <content type="html"><![CDATA[<p><strong>1. Remember Me</strong></p>

<p>We used sessions to store user&rsquo;s id in order to let them sign in just once. However, when users close browser, the session cookie is deleted. So we would like to replace it with a permanent one. Besides, if we store and expose user&rsquo;s id, it could be dangerous.</p>

<p>Therefore, we will generate and store a unique token for each user. First, create a new column to store the token.</p>

<!-- more -->


<p><code>
$ rails g migration add_remember_token_to_users remember_token:string
$ rake db:migrate
</code></p>

<p>Then write a method to generate remember_token before creating a new user in models/user.rb</p>

<p>```ruby
class User &lt; ActiveRecord::Base
&hellip;
before_create { generate_token(:remember_token)}
&hellip;
def generate_token(column)</p>

<pre><code>begin 
    self[column] = SecureRandom.urlsafe_base64
end while User.exists?(column =&gt; self[column])
</code></pre>

<p>end
```</p>

<p>Add a checkbox in views/sessions/new.html.erb for user to let them choose if they want us to remember.</p>

<p>```html</p>

<div class="checkbox">
    <label>
        <%= check_box_tag :remember_me, 1, params[:remember_me] %>
        <%= t('remember me') %>
    </label><br>
</div>


<p>```</p>

<p>Modify the SessionsController so that we store remember_token in cookies when user signed in.</p>

<p>```ruby
def create</p>

<pre><code>user = User.find_by_username(params[:username])
if user &amp;&amp; user.authenticate(params[:password])
    if params[:remember_me]
        cookies.permanent[:remember_token] = user.remember_token
    else
        cookies[:remember_token] = user.remember_token
    end
    flash[:success] = t('flash.session.create.success') + ", #{params[:username]}."
    redirect_to root_path
else
    flash.now[:error] = t('flash.session.create.error')
    render 'new'
end
</code></pre>

<p>end
```</p>

<p>Modify the current_user method in application.rb so it reads the remember_token from cookies rather than the user.id from the session.</p>

<p><code>ruby
def current_user
  @current_user ||= User.find_by_remember_token(cookies[:remember_token]) if cookies[:remember_token]
end
</code></p>

<p>Finally, we want to fill the remember_token column for existing users. Write a file called rebuild_remember_token.rake in lib/tasks and run <code>rake user:rebuild_remember_token</code>.</p>

<p>```ruby
namespace :user do
  desc &ldquo;Rebuild Remember-Tokens&rdquo;
  task :rebuild_remember_token => :environment do</p>

<pre><code>User.transaction do
  User.all.each { |u|
    u.update_attribute :remember_token, SecureRandom.urlsafe_base64
  }
end
</code></pre>

<p>  end
end
```</p>

<p><strong>2. Password Reset</strong></p>

<p>We would like to allow users to reset their password when they forget. First, we will generate the route: <code>resources :password_resets</code>.</p>

<p>Then add a link in the signin page(views/sessions/new.html.erb).</p>

<p>```ruby</p>

<div class="checkbox">
    <label>
        <%= check_box_tag :remember_me, 1, params[:remember_me] %>
        <%= t('.remember_me') %> | <%= link_to t('.forgotten_password'), new_password_reset_path %>
    </label><br/>
</div>


<p>```</p>

<p>Create a password_resets_controller.rb file and a new.html.erb file in views/password_resets.</p>

<p>```ruby
class PasswordResetsController &lt; ApplicationController</p>

<pre><code>def new
end

def create
    @user = User.find_by_email(params[:email])
    if @user
        @user.send_password_reset
        flash[:success] = t('flash.reset.email.success')
        redirect_to root_path
    else 
        flash.now[:error] =  t('flash.reset.email.error')
        render 'new'
    end
end
</code></pre>

<p>```</p>

<p>```ruby</p>

<div class="row">
    <div class="col-md-6 col-md-offset-3">
        <div class="well">
            <h4><%= t('.password_reset') %></h4>
            <hr/>
            <%= form_tag password_resets_path, method: 'post' do %>
        <div class="form-group">
            <%= label_tag :email %><br/>
            <%= text_field_tag :email, params[:email], class: "form-control" %>
        </div>
        <%= submit_tag t('.password_reset'), class: "btn btn-primary" %>
            <% end %>
        </div>
    </div>
</div>


<p>```</p>

<p>Then we will add columns to store the a token for the reset request and the expire time of it.</p>

<p><code>ruby
$ rails g migration add_password_reset_to_users password_reset_token:string password_reset_sent_at:datetime
</code></p>

<p>When the user is found by the email, we will generate a token and send a reset email using send_password_reset method in /models/user.rb</p>

<p>```ruby
def send_password_reset</p>

<pre><code>self.update_column(:password_reset_token, SecureRandom.urlsafe_base64)
</code></pre>

<p>  self.update_column(:password_reset_sent_at, Time.zone.now)
  UserMailer.password_reset(self).deliver
end
```</p>

<p>Create the UserMailer and email template in /views/user_mailer/password_reset_text.erb</p>

<p><code>ruby
$ rails g mailer user_mailer password_reset
</code></p>

<p>```ruby
class UserMailer &lt; ActionMailer::Base
  default from: &ldquo;<a href="&#x6d;&#97;&#x69;&#108;&#x74;&#111;&#58;&#x66;&#x72;&#111;&#109;&#64;&#x65;&#120;&#97;&#109;&#112;&#x6c;&#x65;&#46;&#x63;&#111;&#109;">&#x66;&#x72;&#111;&#x6d;&#64;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x2e;&#99;&#111;&#109;</a>&rdquo;</p>

<p>  def password_reset(user)</p>

<pre><code>@user = user 
mail to: user.email, subject: "Password Reset"
</code></pre>

<p>  end
end
```</p>

<p>```ruby
To reset your password click the URL below.</p>

<p>&lt;%= edit_password_reset_url(@user.password_reset_token) %></p>

<p>If you did not request your password to be reset please ignore this email and your password will stay as it is.
```</p>

<p>We will need to alter enviroment configuration in /config/environment/development.rb to get URLs working. Similar line in production.rb with the live domain name.</p>

<p><code>ruby
Auth::Application.configure do
  config.action_mailer.default_url_options = { :host =&gt; "localhost:3000" }
end
</code></p>

<p>The URL includes the token as the id parameter, which we will use it in edit action. Create a form for users to reset password in edit.html.erb</p>

<p>```ruby
def edit</p>

<pre><code>@user = User.find_by_password_reset_token!(params[:id])
</code></pre>

<p>end
```</p>

<p>```ruby</p>

<h4><%= t('.password_reset') %></h4>


<hr/>


<p>&lt;%= render &lsquo;shared/error&rsquo;, object: @user %>
&lt;%= form_for @user, url: password_reset_path(params[:id]) do |f| %>
  <div class="form-group"></p>

<pre><code>    &lt;%= f.label :password, t('password') %&gt;
    &lt;%= f.password_field :password, class:"form-control", placeholder: "At least 6 digits"%&gt;
&lt;/div&gt;
&lt;div class="form-group"&gt;
    &lt;%= f.label :password_confirmation, t('password_confirmation') %&gt;
    &lt;%= f.password_field :password_confirmation, class:"form-control" %&gt;
&lt;/div&gt;
&lt;%= submit_tag t('update'), class: "btn btn-primary" %&gt;
</code></pre>

<p>&lt;% end %> <br/>
```</p>

<p>Here we use form_for in this form as we’re modifying a resource. Because of this we have to explicitly set the :url parameter so that the form isn’t POSTed to the UsersController. Instead it is sent to the PasswordResetsController’s update action, passing in the reset token as the id.</p>

<p>Finally, we will write the update action.</p>

<p>```ruby
def update
  @user = User.find_by_password_reset_token!(params[:id])
  if @user.password_reset_sent_at &lt; 2.hours.ago</p>

<pre><code>flash[:error] = t('flash.reset.error')
redirect_to new_password_reset_path
</code></pre>

<p>  elsif @user.update_attributes(params.permit![:user])</p>

<pre><code>@user.update_attribute(:password_reset_token, nil)
flash[:success] = t('flash.reset.success')
redirect_to signin_path
</code></pre>

<p>  else</p>

<pre><code>render 'edit'
</code></pre>

<p>  end
end
```</p>

<p><sub>Reference: <a href="http://railscasts.com/episodes/274-remember-me-reset-password?view=asciicast">Railscasts</a></sub></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: How to 'Like' Once and 'Unlike' in Rails]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/08/03/rails-notes-unlike-function/"/>
    <updated>2014-08-03T21:35:00+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/08/03/rails-notes-unlike-function</id>
    <content type="html"><![CDATA[<p>Few months ago, I added a <a href="/posts/2014/02/11/rails-notes-adding-a-like-function/">&lsquo;Like&rsquo; function</a> to my rails project. It&rsquo;s a lovely function, but has some problems left. One is that users could like a single post/comment as much as they can, the other one is that users are not able to unlike.</p>

<p>Thus, I tried to improve the likeable function this weekend. First thing I came up with my head was to add a uniqueness validation.</p>

<!-- more -->


<p>Here is the code I added in <code>like.rb</code>.</p>

<p><code>ruby
validates_uniqueness_of :user_id, scope: [:likeable_id, :likeable_type]
</code></p>

<p>It worked. &lsquo;User&rsquo; could not cheat any more, well, up to a point. But if users want to their mind later on, they are not allowed to do so.</p>

<p>Regarding the second issue, I decided to handle it this way.</p>

<p>Let&rsquo;s assume there is a user called Mr.R. R liked a post, the params[:like] set to true. We would like to provide a link so that R could send another POST with the params[:like] = false. If R haven&rsquo;t make the choice or unliked it before, then a link to POST with the params[:like] = true is available.</p>

<p>First of all, I changed the like method in <code>posts_controller</code>.</p>

<p>```ruby
def like</p>

<pre><code>if post_liked 
    @like.update(like: params[:like])
else 
    Like.create(likeable: @post, user: current_user, like: params[:like])
end
respond_to do |format|
    format.html do
        flash[:success] = "Like Updated!"
        redirect_to :back
    end
    format.js
end 
</code></pre>

<p>end</p>

<p>private</p>

<p>def post_liked</p>

<pre><code>liked?(@post)
</code></pre>

<p>end
```</p>

<p>Here, if R has already liked/unliked the post, and then changed his mind, we would update the <code>like</code> attribute rather than creating another data.</p>

<p>There are two methods in <code>application_controller</code>, which are available to views and posts/comments controllers.</p>

<p>```ruby
def liked?(type)
  @like = Like.find_by(likeable: type, user: current_user)
end</p>

<p>def liked(type)
  @like = Like.find_by(likeable: type, user: current_user)
  if @like</p>

<pre><code>return @like.like
</code></pre>

<p>  else</p>

<pre><code>return false
</code></pre>

<p>  end
end
```</p>

<p>Then I adjusted <code>show.html.erb</code>in the view. As discussed before, I provided the oppsite like/unlike button to users' former dicision.</p>

<p>```ruby
<span id= "post_like" class="pull-right"></p>

<pre><code>&lt;% if signed_in? &amp;&amp; liked(@post) %&gt;
    &lt;%= link_to like_post_path(@post, like: false), method: 'post', remote: true do %&gt;
        &lt;span id="user_like_&lt;%= @post.id %&gt;" class="like"&gt;&lt;i class="fa fa-thumbs-o-up"&gt;&lt;/i&gt;&lt;/span&gt;
    &lt;% end %&gt;   
&lt;% else %&gt;              
    &lt;%= link_to like_post_path(@post, like: true), method: 'post', remote: true do %&gt;
        &lt;span id="user_like_&lt;%= @post.id %&gt;"&gt;&lt;i class="fa fa-thumbs-o-up"&gt;&lt;/i&gt;&lt;/span&gt;
    &lt;% end %&gt;
&lt;% end %&gt;
</code></pre>

<p> &hellip;
 </span>
```</p>

<p>Finally, I changed the <code>like.js.erb</code> file in order to present the difference between like and unlike, as well as the user&rsquo;s new dicision.</p>

<p>```ruby
&lt;% if liked(@post)%></p>

<pre><code>$("#user_like_&lt;%= @post.id %&gt;").addClass("like");
</code></pre>

<p>&lt;% else %></p>

<pre><code>$("#user_like_&lt;%= @post.id %&gt;").removeClass("like");
</code></pre>

<p>&lt;% end %></p>

<p>$(&ldquo;#post_like&rdquo;).load(&ldquo;&lt;%= @post.id %> #post_like&rdquo;)
```</p>

<p>The comments like/unlike function is similar.</p>

<p>This improvement killed me a lot time this weekend, but thankfully, it worked at last. However, there must be a much easier &amp; clean way to do it.</p>

<p>By the way, I had updated my app to bootstrap 3.2, a more resposive-friendly version. It was an nightmare to change the style, like css class/id name etc. I also used fontawesome icons instead of the old ones. The app looks just fine.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Counter Cache]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/03/01/rails-notes-counter-cache/"/>
    <updated>2014-03-01T10:18:40+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/03/01/rails-notes-counter-cache</id>
    <content type="html"><![CDATA[<p>By default, posts in my app are sorted by create_at time. I would like to sort them by the number of comments. In order to implement it, we will apply :counter_cache and :scope.</p>

<!-- more -->


<p>According to Active Record Association on Rails Guides, @post.comments.size requires making a call to the database to perform a COUNT(*) query. :counter_cache can be used to make finding the number of belonging objects more efficient.</p>

<p>First, run a migration to add the column called comments_count to posts.</p>

<p>```ruby
class AddCommentsCountToPosts &lt; ActiveRecord::Migration</p>

<pre><code>def self.up
add_column :posts, :comments_count, :integer, :null =&gt; false, :default =&gt; 0

Post.reset_column_information
Post.all.each do |p|
  p.update_attribute :comments_count, p.comments.length
end
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :posts, :comments_count
</code></pre>

<p>  end
end
<code>``
Then add following code to</code>comment.rb`</p>

<p><code>ruby
belongs_to :post, counter_cache: true
</code></p>

<p>Then we will use scopes. According to Active Record Querying, scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models.</p>

<p>In our case, define a scope called active on <code>post.rb</code></p>

<p><code>ruby
scope :active, -&gt; { where("comments_count &gt;= ?", 5) }
</code></p>

<p>Then add routes to the <code>collection</code>.</p>

<p>```ruby
resources :posts do</p>

<pre><code>...
collection do 
    get 'active'
end
...
</code></pre>

<p>end
```</p>

<p>it will generate the path /posts/active with GET, route to the active action of PostsController, as well as active_posts_path route helper.</p>

<p>In PostsController, define <code>active</code> action</p>

<p>```ruby
def active</p>

<pre><code>    @posts = Post.active.order('created_at DESC').page(params[:page])
    render action: 'index'
</code></pre>

<p>end
```</p>

<p>Finally, use @post.comments_count and active_posts_path in views to achieve what we want at the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Ajaxify Pagination]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/02/22/rails-notes-ajaxify-pagination/"/>
    <updated>2014-02-22T11:25:16+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/02/22/rails-notes-ajaxify-pagination</id>
    <content type="html"><![CDATA[<p>After applying <a href="/posts/2014/02/16/rails-notes-pagination-with-kaminari/">pagination</a> in my app, I would like to ajaxify kaminari paginator. I googled and stackoverflowed this issue, and found the solution, which is quite similar to what I did in <a href="/posts/2014/02/11/rails-notes-adding-a-like-function/">likeable</a> function.</p>

<!-- more -->


<p>First, add <code>remote: true</code> and class id to <code>index.html.erb</code>.</p>

<p>```ruby</p>

<div id="posts">
    <%= render 'shared/posts', object: @posts %>
</div>


<div id="paginator">
    <%= paginate @posts, remote: true %>
</div>


<p>```</p>

<p>Second, create a new file <code>index.js.erb</code>.</p>

<p><code>ruby
$("#posts").html("&lt;%= escape_javascript render 'shared/posts', object: @posts %&gt;");
$("#paginator").html("&lt;%= escape_javascript(paginate(@posts, remote: true).to_s) %&gt;");
</code>
Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Pagination With Kaminari]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/02/16/rails-notes-pagination-with-kaminari/"/>
    <updated>2014-02-16T22:13:47+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/02/16/rails-notes-pagination-with-kaminari</id>
    <content type="html"><![CDATA[<p>With hundreds and thousands of posts on website, we would like to insert some breaks. The first choice for pagination in Rails is will_paginate. However, I find a better one called <a href="https://github.com/amatsuda/kaminari">Kaminari</a>.</p>

<!-- more -->


<p><strong>Controllers and Views</strong></p>

<p>First, add &lsquo;kaminari&rsquo; to &lsquo;Gemfile&rsquo; and run <code>bundle install</code></p>

<p>Second, we apply the scope called <code>page</code> and <code>per</code> in our Controller.</p>

<p><code>@posts = Post.all.page(params[:page]).per(15)</code></p>

<p>that will show 15 posts per each page.</p>

<p>Then, we call <code>paginate</code> helper in our views.</p>

<p><code>&lt;%= paginate @posts %&gt;</code></p>

<p><strong>Configure the default value</strong></p>

<p>run <code>rails g kaminari:config</code> and change the file <code>kaminari_config.rb</code> in config/initializers</p>

<p><code>ruby
Kaminari.configure do |config|
  config.default_per_page = 15
  # config.max_per_page = nil
  config.window = 2
  config.outer_window = 1
  # config.left = 0
  # config.right = 0
  # config.page_method_name = :page
  # config.param_name = :page
end
</code></p>

<p><strong>I18N and labels</strong></p>

<p>We can change the default labels in config/locales.</p>

<p>```ruby
en:
  views:</p>

<pre><code>pagination:
  first: "&amp;laquo; First"
  last: "Last &amp;raquo;"
  previous: "&amp;lsaquo; Prev"
  next: "Next &amp;rsaquo;"
  truncate: "..."
</code></pre>

<p>```</p>

<p><strong>Configure the default view</strong></p>

<p>run <code>rails g kaminari:views default</code> and change the files in app/views/kaminari</p>

<p>e.g. I delete the first and last label in _pagination.html.erb and change the style to bootstrap according to the theme provided by the Kaminari.</p>

<p><strong>Issue</strong></p>

<p>I followed the instruction on Railscasts and the wiki of Kaminari. But my case seemed more complicated. I set three posts per page as default for test, but found that the posts presented in a strange array.</p>

<p>PostsController:
```ruby
def index</p>

<pre><code>...
@posts = Post.all.page(params[:page])
...
</code></pre>

<p>end
```</p>

<p>index.html.erb:
<code>ruby
&lt;%= render 'shared/posts' , object: @posts%&gt;
&lt;%= paginate @posts %&gt;
</code></p>

<p>_posts.html.erb:
<code>ruby
&lt;% object.reverse.each do |post| %&gt;
</code></p>

<p>The problem was that 3 posts each time was passed into the partial and was implemented the reverse scope. So I deleted the <code>reverse</code> scope and changed the line in the controller like this:</p>

<p><code>ruby
@posts = @posts.order('created_at DESC').page(params[:page])
</code></p>
]]></content>
  </entry>
  
</feed>
