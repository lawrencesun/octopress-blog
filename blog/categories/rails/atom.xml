<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Rails | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2016-02-13T19:57:04+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Authorization Using Pundit]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/12/13/rails-notes-authorization-using-pundit/"/>
    <updated>2014-12-13T09:39:39+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/12/13/rails-notes-authorization-using-pundit</id>
    <content type="html"><![CDATA[<p>Authentitcation identifies a user, and authorization controls what a user can do. The most famous gem used for authorization in rails is <a href="railscasts.com/episodes/192-authorization-with-cancan">CanCan</a>, which is developed by Ryan Bates. However, this gem was no longer maintained. <a href="https://github.com/CanCanCommunity/cancancan">CanCanCan</a> and <a href="https://github.com/elabs/pundit">Pundit</a> are alternative gems we could use. Here I choosed Pundit.</p>

<p>First, implement user roles. Define roles in User Model by using enum and add a new column to user table.</p>

<!-- more -->


<p><code>enum role: [:guest, :vip, :admin]</code></p>

<p><code>rails g migration AddRoleToUsers role:integer</code></p>

<p>Set the default user as guest. We could assign roles like user1.admin! and question the roles like user1.admin?</p>

<p>```ruby
class AddRoleToUsers &lt; ActiveRecord::Migration
  def self.up</p>

<pre><code>add_column :users, :role, :integer, default: 0
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :users, :role
</code></pre>

<p>  end
end
```</p>

<p>Next, <code>gem "pundit"</code> into Gemfile and run bundle install.</p>

<p>Run <code>rails g pundit:install</code> to generate a default policy in app/policies/application_policy.rb</p>

<p>Then create own policy, for example, a Post Policy.</p>

<p>```ruby
class PostPolicy &lt; ApplicationPolicy</p>

<pre><code>attr_reader :current_user, :post
</code></pre>

<p>  def initialize(current_user, post)</p>

<pre><code>@current_user = current_user
@post = post
</code></pre>

<p>  end</p>

<p>  def update?</p>

<pre><code>@current_user.admin? or @post.user == @current_user
</code></pre>

<p>  end</p>

<p>  def destroy?</p>

<pre><code>@current_user.admin? or @post.user == @current_user
</code></pre>

<p>  end
end
```</p>

<p>So if current user is not the author of this post or admin, then he is not allowed to update or destroy the post.</p>

<p>After that, add <code>autorize @post</code> to update and destroy action in Post Controller.</p>

<p>In Post show page, if current user do not have the permission, he will not see the edit and delete button.</p>

<p>```ruby
&lt;% if policy(@post).update? %></p>

<pre><code>...
</code></pre>

<p>&lt;% end %>
```</p>

<p>Finally, add following code to Application Controller, so that we include Pundit and show the customized alert.</p>

<p>```ruby
&hellip;
include Pundit
&hellip;
rescue_from Pundit::NotAuthorizedError, with: :user_not_authorized</p>

<p>  private</p>

<p>  def user_not_authorized</p>

<pre><code>redirect_to :back, :alert =&gt; "You don't have permission to those resources."
</code></pre>

<p>  end
```</p>

<p>UPDATE:</p>

<p>Sometimes current_user are not defined, for example a guest user who is not signed in. Then the above authorization may raise a <code>undefined method 'admin?' for nil:NilClass</code> problem, which I met. The solution would be changing <code>current_user.admin?</code> to <code>current_user.try(:admin?)</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Deeply Nested Resources]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/29/rails-notes-deeply-nested-resources/"/>
    <updated>2014-11-29T21:29:26+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/29/rails-notes-deeply-nested-resources</id>
    <content type="html"><![CDATA[<p>Nested resources are commonly used in rails app. For example,</p>

<p>```
resources :books do
  resources :posts do</p>

<pre><code>resources :comments
</code></pre>

<p>  end
  resources :comments
end
```</p>

<p>However, when it&rsquo;s deeply-nested, the URL will looks like this as a monster, <code>/books/:id/posts/:id/comments</code>. And it will cause some difficulties when trying to create/edit comments.</p>

<!-- more -->


<p>For example, <code>book_post_comment_path(@book, @post, @comment)</code> looks complicated and non reusable.</p>

<p>It&rsquo;s also hard to handle different params in comments controller.</p>

<p>So I tried to refactor the code today.</p>

<p>First I changed the routes.rb:</p>

<p>```ruby
resources :books do
  resources :posts
  resources :comments
end</p>

<p>resources :posts do
  resources :comments
end
```</p>

<p>This will generate the routes like this:</p>

<p><code>ruby
books/:id/posts
books/:id/comments
posts/:id
posts/:id/comments
</code></p>

<p>In this way, the comments action can be used in the same way whatever the @commentable is.</p>

<p>The posts controller will not need @postable id except new/create action. If you want to create a new post on books show page like me, you still have to pass books_id to @postable.</p>

<p>And for me, after creating the new post, it will redirect_to @post rather than [@postable, @post]. So when creating new comment for post, it happens on posts/:id page. I also added a link back to this post&rsquo;s parent using @post.postable .</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Polymorphic Path]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/29/rails-notes-polymorphic-path/"/>
    <updated>2014-11-29T21:26:30+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/29/rails-notes-polymorphic-path</id>
    <content type="html"><![CDATA[<p>In my rails app, movie/book and post are in the <em>polymorphic</em> relationship. In <code>posts/show.html.erb</code>, I tried to add &lsquo;Edit&rsquo; and &lsquo;Delete&rsquo; function. The problem was how to write related path.</p>

<p>At first, I used <em>if&hellip;else</em> condition to judge @postable_type. When it equals to &lsquo;Book&rsquo;, then showed <code>edit_book_post_path(@post.postable_id, @post)</code> and <code>book_path(@post.postable_id)</code>, and if it equals to &lsquo;Movie&rsquo;, then showed the related movie path.</p>

<p>It worked fine, but a little bit complicated. The same problem when I render the comments partial, I had to use two different files to handle edit/delete comment path.</p>

<p>Then I found polymorphic_path method on RailsGuides and some articles on the Web.</p>

<!-- more -->


<p>Briefly speaking, the final code I use like this:</p>

<p><code>ruby
link_to 'Edit', edit_polymorphic_path([@postable, @post])
link_to 'Delete', polymorphic_path([@postable, @post])
link_to 'New Post', new_polymorphic_path([@postable, @post])
</code></p>

<p>Now, I can abandon the if&hellip;else condition and use the same template whatever the @postable is.</p>

<p>I also refactor the controller like this:</p>

<p>```ruby
def create</p>

<pre><code>...
if @post.save
    ...
redirect_to [@postable, @post]
    ...
</code></pre>

<p>end
```</p>

<p>Doing this way, it&rsquo;s simple and clear.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: At or Reply to Someone]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/09/rails-notes-at-someone/"/>
    <updated>2014-11-09T08:52:19+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/09/rails-notes-at-someone</id>
    <content type="html"><![CDATA[<p><strong>1. At</strong></p>

<p>The &lsquo;@&rsquo; function is used widely on web apps.</p>

<p>Here I use a jquery plugin called <a href="https://github.com/ichord/At.js">atwho</a>. First download jquery.atwho.js, jquery.caret.js, jquery.atwho.css. Then add these files to app/assets.</p>

<p>Add <code>//= require jquery.atwho</code> to app/assets/javascripts/application.js and add <code>*= require jquery.atwho</code> to app/assets/stylesheets/application.css.scss.</p>

<!-- more -->


<p>Then use it to at users when replying a comment. Following <a href="http://happycasts.net/episodes/76">happycasts</a>, bind the textarea like this:</p>

<p>```
$(function(){
  var commenter = [];</p>

<pre><code>var commenter_exist= [];
$('.comment-user').each(function() {
if($.inArray($(this).text(), commenter_exist) &lt; 0){
  commenter.push($(this).text());
  commenter_exist.push($(this).text());
}
});
</code></pre>

<p>  $(&lsquo;textarea&rsquo;).atwho({at:&ldquo;@&rdquo;, &lsquo;data&rsquo;:commenter});
});
```</p>

<p>One problem I found was this atwho funciont didn&rsquo;t work until refreshed this page. When I deleted turoblink, it worked fine. So Finally I solved it by using a gem called <a href="https://github.com/kossnocorp/jquery.turbolinks">jquery.turbolinks</a>.</p>

<p><strong>2. Reply</strong></p>

<p>Sometimes we would like to reply to other&rsquo;s comment. When we click reply button, we want to &lsquo;@&rsquo; this comment&rsquo;s author.</p>

<p>Thanks to <a href="https://github.com/chloerei/campo">Campo</a> app, I added reply function to my own rails app.</p>

<p>Add following parts to comments view.</p>

<p>```
<a class="btn", data-reply-to="@<%= comment.user.name %> &ldquo; ></p>

<pre><code>&lt;i class="fa fa-reply"&gt;&lt;/i&gt;
</code></pre>

<p></a>
```</p>

<p>Then include a coffee javascript file. Remember to set corrosponding class/id in the html file.</p>

<p><code>
$(document).on 'click', '.comments [data-reply-to]', -&gt;
  textarea = $('#new_comment textarea')
  textarea.focus()
  textarea.val(textarea.val() + $(this).data('reply-to'))
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Link to Commentable]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/11/08/rails-notes-link-to-commentable/"/>
    <updated>2014-11-08T17:19:09+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/11/08/rails-notes-link-to-commentable</id>
    <content type="html"><![CDATA[<p>Few days ago I created a polymorphic comment model based on <a href="http://railscasts.com/episodes/154-polymorphic-association">Railscasts</a>.</p>

<p>Today I wanted to show the lastest comments on homepage and link each comment body to their &lsquo;parents&rsquo; like a book or a movie.</p>

<p>The link path was a bit tricky and finally I figured it out.</p>

<p>What you need here is this particular comment&rsquo;s commentable type like &lsquo;book&rsquo; or &lsquo;movie&rsquo;, as well as the commentable id, so it will leads you to the show page and the url should like &lsquo;book/id&rsquo;.</p>

<!-- more -->


<p>The view page could look like this.</p>

<p><code>ruby
&lt;%= link_to markdown(@comment.body), [@comment.commentable, @comment] %&gt;
</code></p>

<p>Then it will pass commentable type and id, looking for comment/show action.</p>

<p>So add show action in comments_controller like this</p>

<p>```ruby
def show</p>

<pre><code>redirect_to @commentable
</code></pre>

<p>end
```
This will direct to the page that I want.</p>
]]></content>
  </entry>
  
</feed>
