<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2014-07-18T21:44:49+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby程序:自动抓取股票财务数据]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/07/18/stock-data-crawler/"/>
    <updated>2014-07-18T21:03:55+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/07/18/stock-data-crawler</id>
    <content type="html"><![CDATA[<p>无论是投资还是投机股市，股票的财务状况仍然是不可或缺的参考指标。传统金融网站上的数据往往以个股为单位呈现，导致数据的查询、对比和分析比较困难。如果要进行全局扫描和分析，可能就需要把这些数据一个一个下载后进行处理，这方面的时间成本略高。</p>

<p>前段时间在雪球偶然看到有人用Python做了一个自动获取数据的程序，觉得挺有趣，对大量数据的计算和分析可能有用，所以用了一天左右的时间用Ruby写了一个类似的代码。</p>

<!-- more -->


<p>数据来源于网易财经，理论上可以实现所有股票的任意财务数据的抓取，并导入csv文件。例如所有股票的”速动比率“（尽管不懂&hellip;），如下图所示。</p>

<p><img src="http://img0.ph.126.net/E-lgvDQhYHS87p3dkqokeA==/6619508599955660340.png" alt="img" /></p>

<p>核心代码如下:</p>

<p>```ruby</p>

<h1>检测网页是否存在</h1>

<p>def valid_url(url)</p>

<pre><code>url = URI.parse(url)
req = Net::HTTP.new(url.host, url.port)
res = req.request_head(url.path)
return true if res.code == '200'
</code></pre>

<p>end</p>

<h1>抓取数据extract_data</h1>

<p>def extract_data(stock_num, index, url)</p>

<pre><code># 数据来源为网易股票频道，按报告期的主要财务指标，默认显示为6个季度
source = Nokogiri::HTML(open(url))
# 获取股票名称
name_table = source.search("//h1[@class='name']//a")
name = name_table[0].text
# 搜寻所有属于指定css class的值，返回的是一个Array
data_table = source.search("//table[@class='table_bg001 border_box fund_analys']//td")
# 查找Array中含有指定文字描述的元素，并返回元素的地址
......

# 上一步查找到的元素地址后面的六个元素含有所需数据，将其中的数字部分提取出来
# 并加入到一个新建的Array中去
......

# 返回数据
s
</code></pre>

<p>end
```
目前的主要问题是运行速度较慢，以后有时间看看能否改进。不管如何，在此数据的基础上做一些计算、对比和分析应该容易不少。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Counter Cache]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/03/01/rails-notes-counter-cache/"/>
    <updated>2014-03-01T10:18:40+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/03/01/rails-notes-counter-cache</id>
    <content type="html"><![CDATA[<p>By default, posts in my app are sorted by create_at time. I would like to sort them by the number of comments. In order to implement it, we will apply :counter_cache and :scope.</p>

<!-- more -->


<p>According to Active Record Association on Rails Guides, @post.comments.size requires making a call to the database to perform a COUNT(*) query. :counter_cache can be used to make finding the number of belonging objects more efficient.</p>

<p>First, run a migration to add the column called comments_count to posts.</p>

<p>```ruby
class AddCommentsCountToPosts &lt; ActiveRecord::Migration</p>

<pre><code>def self.up
add_column :posts, :comments_count, :integer, :null =&gt; false, :default =&gt; 0

Post.reset_column_information
Post.all.each do |p|
  p.update_attribute :comments_count, p.comments.length
end
</code></pre>

<p>  end</p>

<p>  def self.down</p>

<pre><code>remove_column :posts, :comments_count
</code></pre>

<p>  end
end
<code>``
Then add following code to</code>comment.rb`</p>

<p><code>ruby
belongs_to :post, counter_cache: true
</code></p>

<p>Then we will use scopes. According to Active Record Querying, scoping allows you to specify commonly-used queries which can be referenced as method calls on the association objects or models.</p>

<p>In our case, define a scope called active on <code>post.rb</code></p>

<p><code>ruby
scope :active, -&gt; { where("comments_count &gt;= ?", 5) }
</code></p>

<p>Then add routes to the <code>collection</code>.</p>

<p>```ruby
resources :posts do</p>

<pre><code>...
collection do 
    get 'active'
end
...
</code></pre>

<p>end
```</p>

<p>it will generate the path /posts/active with GET, route to the active action of PostsController, as well as active_posts_path route helper.</p>

<p>In PostsController, define <code>active</code> action</p>

<p>```ruby
def active</p>

<pre><code>    @posts = Post.active.order('created_at DESC').page(params[:page])
    render action: 'index'
</code></pre>

<p>end
```</p>

<p>Finally, use @post.comments_count and active_posts_path in views to achieve what we want at the beginning.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Ajaxify Pagination]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/02/22/rails-notes-ajaxify-pagination/"/>
    <updated>2014-02-22T11:25:16+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/02/22/rails-notes-ajaxify-pagination</id>
    <content type="html"><![CDATA[<p>After applying <a href="/posts/2014/02/16/rails-notes-pagination-with-kaminari/">pagination</a> in my app, I would like to ajaxify kaminari paginator. I googled and stackoverflowed this issue, and found the solution, which is quite similar to what I did in <a href="/posts/2014/02/11/rails-notes-adding-a-like-function/">likeable</a> function.</p>

<!-- more -->


<p>First, add <code>remote: true</code> and class id to <code>index.html.erb</code>.</p>

<p>```ruby</p>

<div id="posts">
    <%= render 'shared/posts', object: @posts %>
</div>


<div id="paginator">
    <%= paginate @posts, remote: true %>
</div>


<p>```</p>

<p>Second, create a new file <code>index.js.erb</code>.</p>

<p><code>ruby
$("#posts").html("&lt;%= escape_javascript render 'shared/posts', object: @posts %&gt;");
$("#paginator").html("&lt;%= escape_javascript(paginate(@posts, remote: true).to_s) %&gt;");
</code>
Done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Pagination With Kaminari]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/02/16/rails-notes-pagination-with-kaminari/"/>
    <updated>2014-02-16T22:13:47+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/02/16/rails-notes-pagination-with-kaminari</id>
    <content type="html"><![CDATA[<p>With hundreds and thousands of posts on website, we would like to insert some breaks. The first choice for pagination in Rails is will_paginate. However, I find a better one called <a href="https://github.com/amatsuda/kaminari">Kaminari</a>.</p>

<!-- more -->


<p><strong>Controllers and Views</strong></p>

<p>First, add &lsquo;kaminari&rsquo; to &lsquo;Gemfile&rsquo; and run <code>bundle install</code></p>

<p>Second, we apply the scope called <code>page</code> and <code>per</code> in our Controller.</p>

<p><code>@posts = Post.all.page(params[:page]).per(15)</code></p>

<p>that will show 15 posts per each page.</p>

<p>Then, we call <code>paginate</code> helper in our views.</p>

<p><code>&lt;%= paginate @posts %&gt;</code></p>

<p><strong>Configure the default value</strong></p>

<p>run <code>rails g kaminari:config</code> and change the file <code>kaminari_config.rb</code> in config/initializers</p>

<p><code>ruby
Kaminari.configure do |config|
  config.default_per_page = 15
  # config.max_per_page = nil
  config.window = 2
  config.outer_window = 1
  # config.left = 0
  # config.right = 0
  # config.page_method_name = :page
  # config.param_name = :page
end
</code></p>

<p><strong>I18N and labels</strong></p>

<p>We can change the default labels in config/locales.</p>

<p>```ruby
en:
  views:</p>

<pre><code>pagination:
  first: "&amp;laquo; First"
  last: "Last &amp;raquo;"
  previous: "&amp;lsaquo; Prev"
  next: "Next &amp;rsaquo;"
  truncate: "..."
</code></pre>

<p>```</p>

<p><strong>Configure the default view</strong></p>

<p>run <code>rails g kaminari:views default</code> and change the files in app/views/kaminari</p>

<p>e.g. I delete the first and last label in _pagination.html.erb and change the style to bootstrap according to the theme provided by the Kaminari.</p>

<p><strong>Issue</strong></p>

<p>I followed the instruction on Railscasts and the wiki of Kaminari. But my case seemed more complicated. I set three posts per page as default for test, but found that the posts presented in a strange array.</p>

<p>PostsController:
```ruby
def index</p>

<pre><code>...
@posts = Post.all.page(params[:page])
...
</code></pre>

<p>end
```</p>

<p>index.html.erb:
<code>ruby
&lt;%= render 'shared/posts' , object: @posts%&gt;
&lt;%= paginate @posts %&gt;
</code></p>

<p>_posts.html.erb:
<code>ruby
&lt;% object.reverse.each do |post| %&gt;
</code></p>

<p>The problem was that 3 posts each time was passed into the partial and was implemented the reverse scope. So I deleted the <code>reverse</code> scope and changed the line in the controller like this:</p>

<p><code>ruby
@posts = @posts.order('created_at DESC').page(params[:page])
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Notes: Add Administrator]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/02/15/rails-notes-add-administrator/"/>
    <updated>2014-02-15T16:02:33+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/02/15/rails-notes-add-administrator</id>
    <content type="html"><![CDATA[<p>On the land of website/software, there is always an Administrator. The Administrator, like a king, has the right to change the rules, block the news and &lsquo;kill&rsquo; the innocent users whenever he likes.</p>

<blockquote><p>Dieu et mon droit.</p></blockquote>

<p>Today, I claimed to the throne &mdash; became an admin who had the power to delete comments and users.</p>

<!-- more -->


<p>First, <code>rails g migration add_admin_to_users</code>.</p>

<p>Second, create a table and run <code>rake db:migrate</code></p>

<p>```ruby
class AddAdminToUsers &lt; ActiveRecord::Migration
  def change</p>

<pre><code>add_column :users, :admin, :boolean, default: false
</code></pre>

<p>  end
end
```</p>

<p>Then, define a method in ApplicationController.</p>

<p>```ruby
def admin_user
  unless current_user.admin?   # line_to_be_modified</p>

<pre><code>flash[:error] = "Please contact admin."
redirect_to root_path
</code></pre>

<p>  end
end
```</p>

<p>Next, add <code>destroy</code> to UsersController</p>

<p>```ruby
&hellip;
before_action :admin_user, only: :destroy
&hellip;
def destroy</p>

<pre><code>@user.destroy
flash[:success] = "User deleted."
redirect_to users_path
</code></pre>

<p>end
```</p>

<p>Afterwards, add a delete link in the view.</p>

<p><code>ruby
&lt;%= link_to 'delete', user_path(user), method: 'delete', data: { confirm: 'You sure?'} %&gt;
</code></p>

<p>Finally, we would like to destroy the posts and comments automatically at the same time we delete the users. <code>has_many :posts, dependent: :destroy</code></p>

<hr />

<ul>
<li>Issue 1:
There would be a nil class error if there was no user signed in, <code>current_user.admin?</code> went wrong. Therefore, I added another method in ApplicationController and change the line_to_be_modified to <code>unless admin?</code></li>
</ul>


<p>```ruby
def admin?</p>

<pre><code>signed_in? &amp;&amp; current_user.admin?
</code></pre>

<p>end
```</p>

<ul>
<li>Issue 2:
Another error occurred when I tried to add the delete link on the comments partial.</li>
</ul>


<p>```ruby
&lt;% if object.comments.any? %></p>

<pre><code>&lt;% object.comments.each do |comment| %&gt;
...
&lt;% if admin? %&gt;
    &lt;%= link_to 'delete', post_comment_path($params), method: 'delete', data: { confirm: 'You sure?'} %&gt;
&lt;% end %&gt;
...
</code></pre>

<p>```</p>

<p>At first, I passed in the &lsquo;comment&rsquo; as $params, and it showed that  the post.id and :id were nil. So I changed the $params to &lsquo;comment.post.id, comment.id&rsquo; and it went well.</p>
]]></content>
  </entry>
  
</feed>
