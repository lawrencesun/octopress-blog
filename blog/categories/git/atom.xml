<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Git | Lawrence Sun]]></title>
  <link href="http://voice.lawrencesun.info/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://voice.lawrencesun.info/"/>
  <updated>2014-07-19T18:40:55+08:00</updated>
  <id>http://voice.lawrencesun.info/</id>
  <author>
    <name><![CDATA[Lawrence Sun]]></name>
    <email><![CDATA[yuliang1987@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[如何合并多个Git Commit]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/07/15/squash-git-commits/"/>
    <updated>2014-07-15T22:06:07+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/07/15/squash-git-commits</id>
    <content type="html"><![CDATA[<p>今天把之前做的一个rails项目升级到Twitter Bootstrap 3.2，结果问题一大堆。主要是class和id名称的改动，以及响应式布局的调整。最后在Heroku部署完成之后，发现原来的“点赞”图标无法正确显示，在stackoverflow翻阅了很多相关问答，和我有同样问题的人不少。但是按照这些方法去尝试，没有一个能有效解决。最终我改用了fonts awesome。</p>

<p>在这个期间，遇到了不少git方面的问题，看来之前还是没有把基础打好。</p>

<p>一个问题是由于不断尝试不同的方法，导致commit过多，非常混乱。于是想把多个commit合并到一起。具体方法如下：</p>

<!-- more -->


<p>首先<code>git log</code>查看目前的commit, 假设按照时间先后顺序有 a, b, c, d 三个commit.</p>

<p>现在要把四个合并到一起，使用<code>rebase</code>这个命令。</p>

<p>```ruby
$ git rebase -i HEAD~4</p>

<p>pick 01d1124 a
pick 6340aaa b
pick ebfd367 c
pick 30e0ccb d</p>

<h1>Rebase 60709da..30e0ccb onto 60709da</h1>

<p>#</p>

<h1>Commands:</h1>

<h1>p, pick = use commit</h1>

<h1>e, edit = use commit, but stop for amending</h1>

<h1>s, squash = use commit, but meld into previous commit</h1>

<p>#</p>

<h1>If you remove a line here THAT COMMIT WILL BE LOST.</h1>

<h1>However, if you remove everything, the rebase will be aborted.</h1>

<p>#
```
接着，把前四行进行如下替换：</p>

<p><code>ruby
pick 01d1124 a
squash 6340aaa b
squash ebfd367 c
squash 30e0ccb d
</code></p>

<p>Git将会把所有四个commit合并到第一个里面去。保存退出后，会出现：</p>

<p>```ruby</p>

<h1>This is a combination of 4 commits.</h1>

<h1>The first commit&rsquo;s message is:</h1>

<p>a</p>

<h1>This is the 2nd commit message:</h1>

<p>b</p>

<h1>This is the 3rd commit message:</h1>

<p>c</p>

<h1>This is the 4th commit message:</h1>

<p>d
&hellip;&hellip;
```
修改新的commit message后再次保存退出，合并完成。</p>

<p>如果在过程中出现冲突，可以使用<code>git rebase --abort</code>命令。</p>

<p>第二个问题是我在git push时候出现 &lsquo;Everything is up to date'。通过<code>git branch</code>查询发现当前的branch是* (no branch).</p>

<p>出现这种情况，首先<code>git reflog</code>， 找到最新的一个commit，然后创建一个临时branch.</p>

<p><code>git checkout -b temp-branch &lt;commit-id&gt;</code> 之后合并到master。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Git Cheet Sheet]]></title>
    <link href="http://voice.lawrencesun.info/posts/2014/01/09/my-git-cheet-sheet/"/>
    <updated>2014-01-09T05:08:18+08:00</updated>
    <id>http://voice.lawrencesun.info/posts/2014/01/09/my-git-cheet-sheet</id>
    <content type="html"><![CDATA[<p>When I saw the Error on my rails sample_app and couldn&rsquo;t find the solution the other day, I wanted to abort the changes and intended to go back to the last commit. I searched on <em>stackoverflow</em> and followed the instruction, ran something like</p>

<pre><code>git reset --Hard 
</code></pre>

<p>Then&hellip; I messed up the files and commits, unsurprisingly.</p>

<p>So I decided to learn some basic command of <strong>Git</strong> apart from</p>

<pre><code>git add .
git commit -m "I need a cupa"
git push
</code></pre>

<p>After watching and practing Git command from <strong>Git Real</strong> on <a href="http://zfer.us/9yIBW">Code School</a>, I generated a basic <em>cheat sheet</em> for myself. Here it is.</p>

<!-- more -->


<ul>
<li><p><strong>Create</strong>
```ruby</p>

<h1>Start a new repo</h1>

$ git init

<h1>Clone existing repo</h1>

<p>$ git clone ssh://user@domain.com/rego.git
```</p></li>
<li><p><strong>Local Change</strong>
```ruby</p>

<h1>Check what&rsquo;s changed</h1>

$ git status

<h1>Add all current changes to the next commit (staging area)</h1>

$ git add .

<h1>Add some files</h1>

$ git add <filename>

<h1>Add files in /doc directory</h1>

$ git add doc/

<h1>Add all txt files</h1>

$ git add *.txt

<h1>Commit previously staged changes</h1>

$ git commit -m &ldquo;Desperately need coffee&rdquo;

<h1>Commit all changes from tracked(not new) files</h1>

$ git commit -a -m &ldquo;Coffee&hellip;&rdquo;

<h1>Change the last commit</h1>

$ git commit &mdash;amend

<h1>Show difference</h1>

$ git diff

<h1>Show staged difference</h1>

<h1>git diff &mdash;staged</h1>

<p>```</p></li>
<li><p><strong>Remote</strong>
```ruby</p>

<h1>Add a remote</h1>

$ git remote add <remote> <url>

<h1>Delete a remote</h1>

$ git remote -mv <remote>

<h1>List all remote repos</h1>

$ git remote -v

<h1>Push local branch to remote repo, -u to set default</h1>

$ git push -u <remote> <branch>

<h1>Pull changes down from the remote. Including fetch(sync) and merge.</h1>

<p>$ git pull
```</p></li>
<li><p><strong>History</strong>
```ruby</p>

<h1>Show all commits</h1>

$ git log

<h1>Show commits with graph</h1>

$ git log &mdash;online &mdash;graph

<h1>Show who chaged what</h1>

<p>$ git blame <filename>
```</p></li>
<li><p><strong>Undo</strong>
```ruby</p>

<h1>Discard all the changes since last commit</h1>

$ git checkout &mdash; <filename>

<h1>Undo last commit and put changes into staging</h1>

$ git reset &mdash;soft HEAD^

<h1>Undo last 2 commits and all changes</h1>

<p>$ git reset &mdash;hard HEAD^^
```</p></li>
<li><p><strong>Tags and Branches</strong>
```ruby</p>

<h1>Mark current commit with a tag</h1>

$ git tag <name>

<h1>List existing branches</h1>

$ git branch

<h1>Create a new branch</h1>

$ git branch &lt;new_branch>

<h1>Create a new branch and switch to it</h1>

$ git checkout -b &lt;new_branch>

<h1>Switch HEAD branch</h1>

$ git checkout <branch>

<h1>Check remote branches</h1>

$ git branch -r

<h1>Delete a local branch</h1>

$ git branch -d <branch>

<h1>Delete a remote <branch></h1>

$ git push origin <branch>

<h1>Clean up deleted remote branches</h1>

<p>$ git remote prune origin
```</p></li>
<li><p><strong>Merge and Rebase</strong>
```ruby</p>

<h1>Merge <branch> into current HEAD</h1>

$ git merge <branch>

<h1>Fetch(sync) remote but don&rsquo;t merge</h1>

$ git fetch

<h1>Rebase current HEAD onto <branch></h1>

<p>$ git rebase <branch>
```</p></li>
<li><p><strong>Config</strong>
```ruby</p>

<h1>Global user name and email</h1>

$ git config &mdash;global user.name &ldquo;name&rdquo;
$ git config &mdash;global user.email &ldquo;email&rdquo;

<h1>Alias</h1>

$ git config alias.<name> <command>

<h1>Colour UI</h1>

<p>$ git config &mdash;global color.ui true
```</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
